name: Python CICD

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main

  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKDIR: "."
  LINE_LENGTH: 120

jobs:
  quality-checks:
    name: Quality checks (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Poetry cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ github.repository_id }}-${{ matrix.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .venv

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Sort imports with isort
        run: |
          poetry run isort **/*.py --profile black --check-only

      - name: Lint code with Ruff
        run: |
          poetry run ruff **/*.py --line-length $LINE_LENGTH --show-source -v

      - name: Format code with Black
        run: |
          poetry run black **/*.py --line-length $LINE_LENGTH --check -v

      - name: Docstrings with interrogate
        run: |
          poetry run interrogate

      - name: Static types with mypy
        run: |
          poetry run mypy

  unit-tests:
    name: Unit tests ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    needs: quality-checks
    if: success()

    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Poetry cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ github.repository_id }}-${{ matrix.python-version }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .venv

      - name: Run pytest
        run: |
          poetry run pytest -p no:warnings --tb=no -vv --junit-xml report.xml

      - name: Upload pytest results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: report.xml
